// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")

  user User? @relation(fields: [userId], references: [id]) // Use optional relation

  @@unique([provider, providerAccountId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User? @relation(fields: [userId], references: [id]) // Use optional relation

  @@map(name: "sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @default(now()) @map(name: "updated_at")

  accounts    Account[]
  sessions    Session[]
  Post        Post[]
  tournaments Event[]

  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")

  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}

model Post {
  id        String   @id @default(cuid())
  title     String
  content   Json?
  published Boolean  @default(false)
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")
  authorId  String

  author User? @relation(fields: [authorId], references: [id]) // Use optional relation

  @@map(name: "posts")
}

model Event {
  id         String       @id @default(cuid())
  title      String
  content    Json?
  startDate  DateTime
  endDate    DateTime
  published  Boolean      @default(false)
  createdAt  DateTime     @default(now()) @map(name: "created_at")
  updatedAt  DateTime     @default(now()) @map(name: "updated_at")
  authorId   String
  Tournament Tournament[]

  author User? @relation(fields: [authorId], references: [id]) // Use optional relation

  @@map(name: "events")
}

enum TournamentType {
  SINGLE_ELIMINATION
  DOUBLE_ELIMINATION
  ROUND_ROBIN
  HYBRID
}

enum CompetitorType {
  TEAM
  PLAYER
  BOTH
}

model Tournament {
  id        String   @id @default(cuid())
  title     String
  published Boolean  @default(false)
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")
  type      TournamentType @default(SINGLE_ELIMINATION) // Use the enum type here
  competitorType CompetitorType @default(TEAM) // Use the enum type here
  divisions  Division[]
  eventId   String

  event Event? @relation(fields: [eventId], references: [id]) // Use optional relation

  @@map(name: "tournaments")
}


enum LevelType {
  OPEN
  A1
  A2
  B
}

enum GenderType {
  MEN
  WOMEN
  MIXED
}

model Division {
  id        String   @id @default(cuid())
  title     String
  published Boolean  @default(false)
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")
  tournamentId String
  gender GenderType @default(MIXED) // Use the enum type here
  level LevelType @default(OPEN) // Use the enum type here

  tournament Tournament? @relation(fields: [tournamentId], references: [id]) // Use optional relation

  @@map(name: "brackets")
}

// enum MatchType {
//   SINGLE
//   BEST_OF
// }

// model Match {
//   id        String   @id @default(cuid())
//   title     String
//   published Boolean  @default(false)
//   createdAt DateTime @default(now()) @map(name: "created_at")
//   updatedAt DateTime @default(now()) @map(name: "updated_at")
//   matchType MatchType @default(SINGLE) // Use the enum type here
//   divisionId String

//   division Division? @relation(fields: [divisionId], references: [id]) // Use optional relation

//   @@map(name: "matches")
// }